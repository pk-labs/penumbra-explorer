# This file was generated. Do not edit manually.

schema {
    query: QueryRoot
    subscription: Root
}

union Action = IbcRelay | NotYetSupportedAction | Output | Spend

union SearchResult = Block | Transaction

type AssetId {
    altBaseDenom: String!
    altBech32M: String!
    inner: String!
}

type Block {
    chainId: String
    createdAt: DateTime!
    height: Int!
    rawEvents: [Event!]!
    rawJson: String
    transactions: [Transaction!]!
    transactionsCount: Int!
}

type BlockCollection {
    items: [Block!]!
    total: Int!
}

type BlockUpdate {
    createdAt: DateTime!
    height: Int!
    transactionsCount: Int!
}

type ChannelPair {
    channelId: String!
    clientId: String!
    completedTxCount: Int!
    connectionId: String
    counterpartyChannelId: String
    pendingTxCount: Int!
}

type DbBlock {
    blockHashHex: String
    chainId: String
    height: Int!
    numTransactions: Int!
    previousBlockHashHex: String
    rootHex: String!
    timestamp: DateTime!
    totalFees: String
    validatorIdentityKey: String
}

type DbRawTransaction {
    blockHeight: Int!
    chainId: String
    clientId: String
    feeAmount: String
    ibcStatus: String!
    rawDataHex: String
    rawJson: JSON
    timestamp: DateTime!
    txHashHex: String!
}

type Event {
    type: String!
    value: String!
}

type Fee {
    amount: String!
    assetId: AssetId
}

type IbcRelay {
    rawAction: String!
}

type IbcStats {
    clientId: String!
    expiredTxCount: Int!
    lastUpdated: DateTime
    pendingTxCount: Int!
    shieldedTxCount: Int!
    shieldedVolume: String!
    unshieldedTxCount: Int!
    unshieldedVolume: String!
}

type IbcTransactionUpdate {
    "Block height where the transaction was included"
    blockHeight: Int!
    "IBC client ID associated with the transaction"
    clientId: String!
    "Flag indicating if this is a status update to an existing transaction"
    isStatusUpdate: Boolean!
    "Raw transaction data"
    raw: String!
    "Current transaction status (pending, completed, expired, error)"
    status: String!
    "Timestamp when the transaction was processed"
    timestamp: DateTime!
    "Transaction hash in hex format"
    txHash: String!
}

type NotYetSupportedAction {
    debug: String!
}

type NotePayload {
    encryptedNote: String!
    ephemeralKey: String!
    noteCommitment: String!
}

type Output {
    body: OutputBody!
    proof: String!
}

type OutputBody {
    balanceCommitment: String!
    notePayload: NotePayload!
    ovkWrappedKey: String!
    wrappedMemoKey: String!
}

type QueryRoot {
    "Get a block by height"
    block(height: Int!): Block
    "Get blocks by selector"
    blocks(selector: BlocksSelector!): [Block!]!
    "Get blocks with pagination and optional filtering"
    blocksCollection(filter: BlockFilter, limit: CollectionLimit!): BlockCollection!
    """

    --- Direct database queries ---
    Get a block directly from the database by height
    """
    dbBlock(height: Int!): DbBlock
    "Get a list of blocks directly from the database"
    dbBlocks(limit: Int, offset: Int): [DbBlock!]!
    "Get the latest block directly from the database"
    dbLatestBlock: DbBlock
    "Get raw transaction data directly from the database by hash"
    dbRawTransaction(txHashHex: String!): DbRawTransaction
    "Get raw transaction data directly from the database"
    dbRawTransactions(limit: Int, offset: Int): [DbRawTransaction!]!
    "Get IBC channel pairs with optional filtering"
    ibcChannelPairs(clientId: String, limit: Int, offset: Int): [ChannelPair!]!
    "Get IBC channel pairs for a specific client ID"
    ibcChannelPairsByClientId(clientId: String!): [ChannelPair!]!
    "Get IBC stats with optional filtering"
    ibcStats(clientId: String, limit: Int, offset: Int, timePeriod: String): [IbcStats!]!
    "Get IBC stats by client ID"
    ibcStatsByClientId(clientId: String!, timePeriod: String): IbcStats
    "Get total shielded volume across all IBC clients"
    ibcTotalShieldedVolume: TotalShieldedVolume!
    "Search for blocks or transactions"
    search(slug: String!): SearchResult
    "Get blockchain statistics"
    stats: Stats!
    "Get a transaction by hash"
    transaction(hash: String!): Transaction
    "Get transactions by selector"
    transactions(selector: TransactionsSelector!): [Transaction!]!
    "Get transactions with pagination and optional filtering"
    transactionsCollection(filter: TransactionFilter, limit: CollectionLimit!): TransactionCollection!
}

type Root {
    blocks: BlockUpdate!
    "Subscribe to IBC transactions with optional client ID filtering and pagination"
    ibcTransactions(clientId: String, limit: Int, offset: Int): IbcTransactionUpdate!
    latestBlocks(limit: Int): BlockUpdate!
    "Subscribe to latest IBC transactions with optional client ID filtering"
    latestIbcTransactions(clientId: String, limit: Int): IbcTransactionUpdate!
    latestTransactions(limit: Int): TransactionUpdate!
    "Subscribe to total shielded volume updates"
    totalShieldedVolume: TotalShieldedVolumeUpdate!
    transactionCount: TransactionCountUpdate!
    transactions: TransactionUpdate!
}

type Spend {
    authSig: String!
    body: SpendBody!
    proof: String!
}

type SpendBody {
    balanceCommitment: String!
    nullifier: String!
    rk: String!
}

type Stats {
    totalTransactionsCount: Int!
}

type TotalShieldedVolume {
    "Total shielded volume across all IBC clients"
    value: String!
}

type TotalShieldedVolumeUpdate {
    "Total shielded volume across all IBC clients"
    value: String!
}

type Transaction {
    anchor: String!
    bindingSig: String!
    block: Block!
    body: TransactionBody!
    clientId: String
    hash: String!
    ibcStatus: IbcStatus!
    index: Int!
    raw: String!
    rawEvents: [Event!]!
    rawJson: String!
}

type TransactionBody {
    actions: [Action!]!
    actionsCount: Int!
    detectionData: [String!]!
    memo: String
    parameters: TransactionParameters!
    rawActions: [String!]!
}

type TransactionCollection {
    items: [Transaction!]!
    total: Int!
}

type TransactionCountUpdate {
    count: Int!
}

type TransactionParameters {
    chainId: String!
    expiryHeight: Int!
    fee: Fee!
}

type TransactionUpdate {
    hash: String!
    id: Int!
    raw: String!
}

enum IbcStatus {
    COMPLETED
    ERROR
    EXPIRED
    PENDING
    UNKNOWN
}

enum RangeDirection {
    NEXT
    PREVIOUS
}

scalar DateTime

"A scalar that can represent any JSON value."
scalar JSON

input BlockFilter {
    height: Int
}

input BlockHeightRange {
    from: Int!
    to: Int!
}

input BlocksSelector {
    latest: LatestBlock
    range: BlockHeightRange
}

input CollectionLimit {
    length: Int
    offset: Int
}

input LatestBlock {
    limit: Int!
}

input LatestTransactions {
    limit: Int!
}

input TransactionFilter {
    clientId: String
    hash: String
}

input TransactionRange {
    direction: RangeDirection!
    fromTxHash: String!
    limit: Int!
}

input TransactionsSelector {
    clientId: String
    latest: LatestTransactions
    range: TransactionRange
}
