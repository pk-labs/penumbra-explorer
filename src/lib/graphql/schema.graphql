# This file was generated. Do not edit manually.

schema {
    query: QueryRoot
    subscription: Root
}

union Action = IbcRelay | NotYetSupportedAction | Output | Spend

union SearchResult = Block | Transaction | ValidatorSearchResult

type AssetId {
    altBaseDenom: String!
    altBech32M: String!
    inner: String!
}

type Block {
    chainId: String
    createdAt: DateTime!
    height: Int!
    rawEvents: [Event!]!
    rawJson: JSON!
    transactions: [Transaction!]!
    transactionsCount: Int!
}

type BlockCollection {
    items: [Block!]!
    total: Int!
}

type BlockParticipation {
    height: Int!
    signed: Boolean!
}

type BlockUpdate {
    createdAt: DateTime!
    height: Int!
    transactionsCount: Int!
}

type ChainParameters {
    chainId: String!
    currentBlockHeight: Int!
    currentBlockTime: DateTime!
    currentEpoch: Int!
    epochDuration: Int!
    lastUpdated: DateTime!
    nextEpochIn: Int!
}

type CommissionInfo {
    rateBps: Int!
    recipientAddress: String
    streamType: String!
}

type DbBlock {
    blockHashHex: String
    chainId: String
    height: Int!
    numTransactions: Int!
    previousBlockHashHex: String
    rootHex: String!
    timestamp: DateTime!
    totalFees: String
    validatorIdentityKey: String
}

type DbRawTransaction {
    blockHeight: Int!
    chainId: String
    clientId: String
    feeAmount: String
    ibcStatus: String!
    rawDataHex: String
    rawJson: JSON!
    timestamp: DateTime!
    txHashHex: String!
}

type Event {
    type: String!
    value: String!
}

type Fee {
    amount: String!
    assetId: AssetId
}

type IbcRelay {
    rawAction: String!
}

type IbcStats {
    channelId: String
    clientId: String!
    counterpartyChannelId: String
    expiredTxCount: Int!
    lastUpdated: DateTime
    pendingTxCount: Int!
    shieldedTxCount: Int!
    shieldedVolume: String!
    status: ClientStatus!
    totalTxCount: Int!
    unshieldedTxCount: Int!
    unshieldedVolume: String!
}

type IbcTransactionUpdate {
    blockHeight: Int!
    clientId: String!
    isStatusUpdate: Boolean!
    raw: String!
    status: String!
    timestamp: DateTime!
    txHash: String!
}

type NotYetSupportedAction {
    debug: String!
}

type NotePayload {
    encryptedNote: String!
    ephemeralKey: String!
    noteCommitment: String!
}

type Output {
    body: OutputBody!
    proof: String!
}

type OutputBody {
    balanceCommitment: String!
    notePayload: NotePayload!
    ovkWrappedKey: String!
    wrappedMemoKey: String!
}

type QueryRoot {
    block(height: Int!): Block
    blocks(filter: BlockFilter, limit: CollectionLimit!): BlockCollection!
    dbBlock(height: Int!): DbBlock
    dbBlocks(limit: Int, offset: Int): [DbBlock!]!
    dbLatestBlock: DbBlock
    dbRawTransaction(txHashHex: String!): DbRawTransaction
    dbRawTransactions(limit: Int, offset: Int): [DbRawTransaction!]!
    ibcStats(clientId: String, limit: Int, offset: Int, timePeriod: TimePeriod): [IbcStats!]!
    ibcTotalShieldedVolume: TotalShieldedVolume!
    search(slug: String!): SearchResult
    stats: Stats!
    transaction(hash: String!): Transaction
    transactions(filter: TransactionFilter, limit: CollectionLimit!): TransactionCollection!
    validatorDetails(id: String!): ValidatorDetails
    validatorsHomepage(filter: ValidatorFilter): ValidatorHomepageData!
}

type Root {
    blocks: BlockUpdate!
    ibcTransactions(clientId: String, limit: Int, offset: Int): IbcTransactionUpdate!
    latestBlocks(limit: Int): BlockUpdate!
    latestIbcTransactions(clientId: String, limit: Int): IbcTransactionUpdate!
    latestTransactions(limit: Int): TransactionUpdate!
    totalShieldedVolume: TotalShieldedVolumeUpdate!
    transactionCount: TransactionCountUpdate!
    transactions: TransactionUpdate!
}

type Spend {
    authSig: String!
    body: SpendBody!
    proof: String!
}

type SpendBody {
    balanceCommitment: String!
    nullifier: String!
    rk: String!
}

type StakingParameters {
    activeValidatorCount: Int!
    activeValidatorLimit: Int!
    minValidatorStake: String!
    slashingPenaltyDowntime: String!
    slashingPenaltyMisbehavior: String!
    totalStaked: String!
    unbondingDelay: String!
    uptimeBlocksWindow: Int!
    uptimeMinRequired: String!
}

type Stats {
    totalTransactionsCount: Int!
}

type TotalShieldedVolume {
    "Total shielded volume across all IBC clients"
    value: String!
}

type TotalShieldedVolumeUpdate {
    value: String!
}

type Transaction {
    anchor: String!
    bindingSig: String!
    block: Block!
    body: TransactionBody!
    clientId: String
    hash: String!
    ibcStatus: IbcStatus!
    index: Int!
    raw: String!
    rawEvents: [Event!]!
    rawJson: JSON!
}

type TransactionBody {
    actions: [Action!]!
    actionsCount: Int!
    detectionData: [String!]!
    memo: String
    parameters: TransactionParameters!
    rawActions: [String!]!
}

type TransactionCollection {
    items: [Transaction!]!
    total: Int!
}

type TransactionCountUpdate {
    count: Int!
}

type TransactionParameters {
    chainId: String!
    expiryHeight: Int!
    fee: Fee!
}

type TransactionUpdate {
    hash: String!
    id: Int!
    raw: String!
}

type Validator {
    bondingState: String
    commission: Float!
    firstSeenTime: DateTime
    id: String
    name: String
    state: String!
    uptime: Float
    votingPower: Int!
    votingPowerActivePercentage: Float!
}

type ValidatorDetails {
    activeSince: DateTime
    bondingState: String
    commissionPercentage: Float!
    commissionStreams: [CommissionInfo!]!
    description: String
    id: String!
    last300Blocks: [BlockParticipation!]!
    missedBlocks: Int!
    name: String
    signedBlocks: Int!
    state: String!
    totalUptime: Float
    uptimeBlockWindow: Int!
    votingPower: Int!
    votingPowerActivePercentage: Float!
    website: String
}

type ValidatorHomepageData {
    chainParameters: ChainParameters
    stakingParameters: StakingParameters!
    validators: [Validator!]!
}

type ValidatorSearchResult {
    displayName: String!
    id: String!
}

enum ClientStatus {
    active
    expired
    frozen
    unknown
}

enum IbcStatus {
    COMPLETED
    ERROR
    EXPIRED
    PENDING
    UNKNOWN
}

enum TimePeriod {
    ALL
    DAY
    MONTH
}

enum ValidatorStateFilter {
    ACTIVE
    ALL
    INACTIVE
}

scalar DateTime

"A scalar that can represent any JSON value."
scalar JSON

input BlockFilter {
    height: Int
}

input CollectionLimit {
    length: Int
    offset: Int
}

input TransactionFilter {
    clientId: String
    hash: String
    validator: String
}

input ValidatorFilter {
    state: ValidatorStateFilter
}
